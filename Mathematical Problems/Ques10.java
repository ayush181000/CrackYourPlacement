public class Ques10 {

}

class Solution {

    public int maxPoints(int[][] points) {
        int n = points.length;
        int res = 1;
        for (int i = 0; i < n; i++) {
            int dup = 1;
            for (int j = i + 1; j < n; j++) {
                int cnt = 2;
                int x1 = points[i][0], y1 = points[i][1];
                int x2 = points[j][0], y2 = points[j][1];
                for (int k = j + 1; k < n; k++) {
                    int x3 = points[k][0], y3 = points[k][1];
                    if (x1 * y2 + x2 * y3 + x3 * y1 - x3 * y2 - x2 * y1 - x1 * y3 == 0) {
                        cnt++;
                    }
                }
                res = Math.max(res, cnt);
            }
        }

        return res;
    }
}

class Solution2 {
    public int maxPoints(int[][] points) {
        int n = points.length, maxPoints = 0;
        if (points == null || n == 0)
            return maxPoints;
        if (n <= 2) {
            return n;
        }
        // for each point, count points having same slope
        for (int i = 0; i < n; i++) {
            int same = 0; // counts same points
            Map<Double, Integer> map = new HashMap<>();
            for (int j = 0; j < n; j++) {
                if (points[i][0] == points[j][0] && points[i][1] == points[j][1])
                    same++;
                else {
                    // to be precise we need to take double
                    double m = (points[i][1] - points[j][1]) * 1.0 / (points[i][0] -
                            points[j][0]);
                    map.put(m, map.getOrDefault(m, 0) + 1);
                }
            }
            // keep track of maximum points lies
            // on the line generated by point[i]
            for (int count : map.values()) {
                maxPoints = Math.max(maxPoints, count + same);
            }
        }
        return maxPoints;
    }
}
